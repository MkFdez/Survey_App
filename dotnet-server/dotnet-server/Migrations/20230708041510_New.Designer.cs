// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_server.Models;

#nullable disable

namespace dotnet_server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230708041510_New")]
    partial class New
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("dotnet_server.Models.PossibleAnswer", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Questionid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("a")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("t")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Questionid");

                    b.ToTable("PossibleAnswer");
                });

            modelBuilder.Entity("dotnet_server.Models.Question", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surveyid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("m")
                        .HasColumnType("bit");

                    b.Property<string>("q")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("t")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Surveyid");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("dotnet_server.Models.Survey", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isPublic")
                        .HasColumnType("bit");

                    b.Property<string>("ownerid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("ownerid");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("dotnet_server.Models.SurveyResponse", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("surveyid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("surveyid");

                    b.ToTable("SurveysResponse");
                });

            modelBuilder.Entity("dotnet_server.Models.UsedIps", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Surveyid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Surveyid");

                    b.ToTable("UsedIps");
                });

            modelBuilder.Entity("dotnet_server.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("passwordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dotnet_server.Models.PossibleAnswer", b =>
                {
                    b.HasOne("dotnet_server.Models.Question", "Question")
                        .WithMany("pa")
                        .HasForeignKey("Questionid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("dotnet_server.Models.Question", b =>
                {
                    b.HasOne("dotnet_server.Models.Survey", "Survey")
                        .WithMany("questions")
                        .HasForeignKey("Surveyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("dotnet_server.Models.Survey", b =>
                {
                    b.HasOne("dotnet_server.Models.User", "owner")
                        .WithMany("surveys")
                        .HasForeignKey("ownerid");

                    b.Navigation("owner");
                });

            modelBuilder.Entity("dotnet_server.Models.SurveyResponse", b =>
                {
                    b.HasOne("dotnet_server.Models.Survey", "survey")
                        .WithMany("surveyResponses")
                        .HasForeignKey("surveyid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("survey");
                });

            modelBuilder.Entity("dotnet_server.Models.UsedIps", b =>
                {
                    b.HasOne("dotnet_server.Models.Survey", null)
                        .WithMany("usedIps")
                        .HasForeignKey("Surveyid");
                });

            modelBuilder.Entity("dotnet_server.Models.Question", b =>
                {
                    b.Navigation("pa");
                });

            modelBuilder.Entity("dotnet_server.Models.Survey", b =>
                {
                    b.Navigation("questions");

                    b.Navigation("surveyResponses");

                    b.Navigation("usedIps");
                });

            modelBuilder.Entity("dotnet_server.Models.User", b =>
                {
                    b.Navigation("surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
